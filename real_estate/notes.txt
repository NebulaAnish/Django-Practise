- startproject: $ django-admin startproject real_state
- make app named listing
- add new app to installed apps
- makemigrations # to create database table 
- apply migrations # to apply changes to database (create in this case)
- make a class Listing by inheriting from models.Model 
- make required variables like room = models.IntegerField(max_length=100)
- apply migrations to the database
- register the model to admin.py to be able to use it from /admin route
      from .models import Listing
      admin.site.register(Listing)

- create a view in views.py for each CRUD + list operations

** List View:
            def listing_list(request):
                  listings = Listings(name of class).objects.all()
                  context = {
                        "listings":listings
                  }
                  return render(request,"listing.html",context)
- this view is associated with default route in urls.py
- in settings.py edit path in templates variable to allow BASE_DIR/"templates"
- make templates folder in BASE_DIR and make listings.html
- using jinja templating list the contents of each listing

- also import the listing_list  view into urls.py
-     path("", listing_list)    # listing_list is imported from app_name/views.py

** Retrieve View:
            def listing_retrieve(request,pk): # pk means primary key
                  listing =  Listings.objects.get(id=pk)
                  context = {
                        "listing":listing
                  }
                  return render(request,"retrieve.html",context)
- this is associated with /listing/<pk>/ route in urls.py 
- make retrieve.html in templates folder

** Create View:
- create forms.py inside listing(app dir) folder
       from django.forms import ModelForm, forms
       from .models import Listing(model name)  
- create form using class:
      class ListingForm(ModelForm):
            class Meta:
                  model = Listing
                  fields = [
                        "title",
                        "author",
                        "price",
                        "rating",
                  ]
- in views.py:
      from .forms import ListingForm
      form = ListingForm()
      def listing_create(request):
            if request.method == "POST":
                  form = ListingForm(request.POST)
                  if form.is_valid():
                        form.save()
                        return redirect("/")
            context= {
                  "form":form
            }
            return render(request,"listing_create.html",context)
- in listing_create.html:
      - inside forms tags with method = post insert:
            {% csrf_token %}
            {{ form.as_p }}
            button type submit
- in urls.py:
      path("add_listing/",listing_create)

## Update View

same as create view but the difference being:
      def listing_update(request,pk):
            listing = Listing.objects.get(id=pk) 
            form = ListingForm(instance=listing)
            if request.method == "POST":
                  form = ListingForm(request.post,instance=pk)
                  if form.is_valid():
                        form.save()
                        return redirect("/listing/<pk>")
            context = {
                  "form":form
            }
            retrun render(request,"listing_update.html",context)
- in urls.py :
      path("listing/<pk>/edit/",listing_update)

## Delete View
- in views.py:
      listing= Listing.objects.get(id=pk)
      listing.delete()
      return redirect("/")
- in urls:
      path("listing/<pk>/delete",listing_delete)
